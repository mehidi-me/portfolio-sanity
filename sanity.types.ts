// Query TypeMap
import '@sanity/client'

/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type Timeline = {
  _type: 'timeline'
  items?: Array<{
    title?: string
    milestones?: Array<
      {
        _key: string
      } & Milestone
    >
    _type: 'item'
    _key: string
  }>
}

export type Milestone = {
  _type: 'milestone'
  title?: string
  description?: string
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  tags?: Array<string>
  duration?: Duration
}

export type Portfolio = {
  _id: string
  _type: 'portfolio'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  portfolioCategory?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'portfolioCategory'
  }
  coverImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
}

export type PortfolioCategory = {
  _id: string
  _type: 'portfolioCategory'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
}

export type Slug = {
  _type: 'slug'
  current?: string
  source?: string
}

export type Settings = {
  _id: string
  _type: 'settings'
  _createdAt: string
  _updatedAt: string
  _rev: string
  menuItems?: Array<{
    title?: string
    link?: string
    _type: 'menuItem'
    _key: string
  }>
  menuMainButton?: {
    title?: string
    link?: string
  }
  footer?: string
  adminEmail?: string
  ogImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
}

export type Home = {
  _id: string
  _type: 'home'
  _createdAt: string
  _updatedAt: string
  _rev: string
  heroSection?: {
    title?: string
    overview?: string
    fadeImage?: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
    }
    button1?: {
      text?: string
      link?: string
    }
    button2?: {
      text?: string
      link?: string
    }
  }
  aboutSection?: {
    about1?: {
      title?: string
      description?: string
    }
    about2?: {
      title?: string
      description?: string
      image?: {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
      }
    }
    about3?: {
      image?: {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
      }
      videoLink?: string
      keyPoints?: Array<string>
    }
  }
  experienceSection?: {
    tagline?: string
    title?: string
    description?: string
    heading?: string
    experience?: Array<{
      title?: string
      description?: string
      duration?: Duration
      tagline?: string
      _key: string
    }>
  }
  servicesSection?: {
    tagline?: string
    title?: string
    fadeImage?: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
    }
    services?: Array<{
      title?: string
      description?: Array<{
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'normal'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }>
      _key: string
    }>
  }
  portfolioSection?: {
    tagline?: string
    title?: string
    portfolios?: Array<{
      _ref: string
      _type: 'reference'
      _weak?: boolean
      _key: string
      [internalGroqTypeReferenceTo]?: 'portfolio'
    }>
  }
  keyIdeaSection?: {
    tagline?: string
    title?: string
    keyIdeas?: Array<{
      description?: string
      _key: string
    }>
  }
  contactSection?: {
    tagline?: string
    title?: string
    fadeImage?: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
    }
    buttonText?: string
  }
}

export type Duration = {
  _type: 'duration'
  start?: string
  end?: string
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | Timeline
  | Milestone
  | Portfolio
  | PortfolioCategory
  | Slug
  | Settings
  | Home
  | Duration
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ./sanity/lib/queries.ts
// Variable: homePageQuery
// Query: {'home':  *[_type == "home"][0]{  ...,portfolioSection{  ...,  portfolios[]->{    ...,    portfolioCategory->  }}},'portfolioCategory': *[_type == "portfolioCategory"]}
export type HomePageQueryResult = {
  home: {
    _id: string
    _type: 'home'
    _createdAt: string
    _updatedAt: string
    _rev: string
    heroSection?: {
      title?: string
      overview?: string
      fadeImage?: {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
      }
      button1?: {
        text?: string
        link?: string
      }
      button2?: {
        text?: string
        link?: string
      }
    }
    aboutSection?: {
      about1?: {
        title?: string
        description?: string
      }
      about2?: {
        title?: string
        description?: string
        image?: {
          asset?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
          }
          hotspot?: SanityImageHotspot
          crop?: SanityImageCrop
          _type: 'image'
        }
      }
      about3?: {
        image?: {
          asset?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
          }
          hotspot?: SanityImageHotspot
          crop?: SanityImageCrop
          _type: 'image'
        }
        videoLink?: string
        keyPoints?: Array<string>
      }
    }
    experienceSection?: {
      tagline?: string
      title?: string
      description?: string
      heading?: string
      experience?: Array<{
        title?: string
        description?: string
        duration?: Duration
        tagline?: string
        _key: string
      }>
    }
    servicesSection?: {
      tagline?: string
      title?: string
      fadeImage?: {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
      }
      services?: Array<{
        title?: string
        description?: Array<{
          children?: Array<{
            marks?: Array<string>
            text?: string
            _type: 'span'
            _key: string
          }>
          style?: 'normal'
          listItem?: 'bullet' | 'number'
          markDefs?: Array<{
            href?: string
            _type: 'link'
            _key: string
          }>
          level?: number
          _type: 'block'
          _key: string
        }>
        _key: string
      }>
    }
    portfolioSection: {
      tagline?: string
      title?: string
      portfolios: Array<{
        _id: string
        _type: 'portfolio'
        _createdAt: string
        _updatedAt: string
        _rev: string
        title?: string
        slug?: Slug
        portfolioCategory: {
          _id: string
          _type: 'portfolioCategory'
          _createdAt: string
          _updatedAt: string
          _rev: string
          title?: string
        } | null
        coverImage?: {
          asset?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
          }
          hotspot?: SanityImageHotspot
          crop?: SanityImageCrop
          _type: 'image'
        }
      }> | null
    } | null
    keyIdeaSection?: {
      tagline?: string
      title?: string
      keyIdeas?: Array<{
        description?: string
        _key: string
      }>
    }
    contactSection?: {
      tagline?: string
      title?: string
      fadeImage?: {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
      }
      buttonText?: string
    }
  } | null
  portfolioCategory: Array<{
    _id: string
    _type: 'portfolioCategory'
    _createdAt: string
    _updatedAt: string
    _rev: string
    title?: string
  }>
}
// Variable: pagesBySlugQuery
// Query: *[_type == "page" && slug.current == $slug][0] {    _id,    _type,    body,    overview,    title,    "slug": slug.current,  }
export type PagesBySlugQueryResult = null
// Variable: projectBySlugQuery
// Query: *[_type == "project" && slug.current == $slug][0] {    _id,    _type,    client,    coverImage,    description,    duration,    overview,    site,    "slug": slug.current,    tags,    title,  }
export type ProjectBySlugQueryResult = null
// Variable: settingsQuery
// Query: *[_type == "settings"][0]{    _id,    _type,    footer,    menuItems[],    ogImage,    menuMainButton,    adminEmail  }
export type SettingsQueryResult = {
  _id: string
  _type: 'settings'
  footer: string | null
  menuItems: Array<{
    title?: string
    link?: string
    _type: 'menuItem'
    _key: string
  }> | null
  ogImage: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  } | null
  menuMainButton: {
    title?: string
    link?: string
  } | null
  adminEmail: string | null
} | null
// Variable: slugsByTypeQuery
// Query: *[_type == $type && defined(slug.current)]{"slug": slug.current}
export type SlugsByTypeQueryResult = Array<{
  slug: string | null
}>

declare module '@sanity/client' {
  interface SanityQueries {
    '{\n\'home\':  *[_type == "home"][0]{\n  ...,\nportfolioSection{\n  ...,\n  portfolios[]->{\n    ...,\n    \nportfolioCategory->\n  }\n}\n},\n\'portfolioCategory\': *[_type == "portfolioCategory"]\n}\n': HomePageQueryResult
    '\n  *[_type == "page" && slug.current == $slug][0] {\n    _id,\n    _type,\n    body,\n    overview,\n    title,\n    "slug": slug.current,\n  }\n': PagesBySlugQueryResult
    '\n  *[_type == "project" && slug.current == $slug][0] {\n    _id,\n    _type,\n    client,\n    coverImage,\n    description,\n    duration,\n    overview,\n    site,\n    "slug": slug.current,\n    tags,\n    title,\n  }\n': ProjectBySlugQueryResult
    '\n  *[_type == "settings"][0]{\n    _id,\n    _type,\n    footer,\n    menuItems[],\n    ogImage,\n    menuMainButton,\n    adminEmail\n  }\n': SettingsQueryResult
    '\n  *[_type == $type && defined(slug.current)]{"slug": slug.current}\n': SlugsByTypeQueryResult
  }
}
